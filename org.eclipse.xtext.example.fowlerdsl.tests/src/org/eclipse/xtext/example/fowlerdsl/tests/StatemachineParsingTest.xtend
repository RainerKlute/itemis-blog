/*
 * generated by Xtext
 */
package org.eclipse.xtext.example.fowlerdsl.tests

import com.google.inject.Inject
import org.eclipse.xtext.example.fowlerdsl.statemachine.Statemachine
import org.eclipse.xtext.example.fowlerdsl.tests.utils.StatemachineResourceSetHelper
import org.eclipse.xtext.testing.InjectWith
import org.eclipse.xtext.testing.XtextRunner
import org.eclipse.xtext.testing.util.ParseHelper
import org.eclipse.xtext.testing.validation.ValidationTestHelper
import org.junit.Before
import org.junit.Test
import org.junit.runner.RunWith

@RunWith(XtextRunner)
@InjectWith(StatemachineInjectorProvider)
class StatemachineParsingTest {

	@Inject extension ParseHelper<Statemachine>
	@Inject extension ValidationTestHelper
	@Inject extension StatemachineResourceSetHelper
	
	@Before def setup() {
		initializeResourceSet
	}

	@Test def load_model() {
		'''
		events
			doorClosed   D1CL
			drawerOpened D2OP
			lightOn      L1ON
			doorOpened   D1OP
			panelClosed  PNCL
		end
		
		resetEvents
			doorOpened
		end
		
		commands
			unlockPanel PNUL
			lockPanel   NLK
			lockDoor    D1LK
			unlockDoor  D1UL
		end
		
		state idle
			actions {unlockDoor lockPanel}
			doorClosed => active
		end
		
		state active
			drawerOpened => waitingForLight
			lightOn      => waitingForDrawer
		end
		
		state waitingForLight
			lightOn => unlockedPanel
		end
		
		state waitingForDrawer
			drawerOpened => unlockedPanel
		end
		
		state unlockedPanel
			actions {unlockPanel lockDoor}
			panelClosed => idle
		end
		'''.parse.assertNoErrors
	}

	@Test def load_model_referencing_external_resource() {
		'''
		resetEvents
			doorOpened
		end
		
		state idle
			actions {unlockDoor lockPanel}
			doorClosed => active
		end
		
		state active
			drawerOpened => waitingForLight
			lightOn      => waitingForDrawer
		end
		
		state waitingForLight
			lightOn => unlockedPanel
		end
		
		state waitingForDrawer
			drawerOpened => unlockedPanel
		end
		
		state unlockedPanel
			actions {unlockPanel lockDoor}
			panelClosed => idle
		end
		'''.hasNoErrors
	}

	private def hasNoErrors(CharSequence text) {
		text.parse(resourceSet).assertNoErrors
	}

}
